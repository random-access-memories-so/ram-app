{"version":3,"sources":["tools/metadata.ts","components/Navigation.tsx","components/Wallet.tsx","components/CassettePlayer.tsx","components/CassettePicker.tsx","tools/ram.ts","components/NFT.tsx","pages/Home.tsx","components/ARViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BinaryReader","prototype","readPubkey","array","this","readFixedArray","PublicKey","BinaryWriter","writePubkey","value","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","MetadataKey","MetadataCategory","METADATA_PROGRAM_ID","METADATA_PREFIX","EDITION","EditionMarker","args","key","ledger","edition","editionOffset","indexOffset","Math","floor","Error","positionInBitsetFromRight","mask","pow","Creator","address","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","updateAuthority","mint","data","primarySaleHappened","isMutable","editionNonce","masterEdition","MetadataV1","getEdition","METADATA_SCHEMA","Map","instruction","kind","fields","type","maxSupply","supply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","METADATA_REPLACE","RegExp","decodeMetadata","buffer","metadata","deserializeUnchecked","replace","tokenMint","a","findProgramAddress","Buffer","from","toBase58","getMetadataAddress","Navigation","wallet","useWallet","Toolbar","style","display","flexGrow","src","alt","maxWidth","startIcon","LinkOff","marginLeft","Wallet","children","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","enqueueSnackbar","useSnackbar","onError","useCallback","error","message","variant","console","autoConnect","CassettePlayer","mixtape","useState","metadataExtension","setMetadataExtension","useEffect","fetch","json","newMetadataExtension","fetchMetadataExtension","modelUri","file","properties","files","find","auto-rotate","camera-controls","rotation-per-second","minHeight","width","margin","className","title","allow","border","CassettePlayerDialog","props","open","setOpen","Dialog","fullScreen","DialogActions","IconButton","onClick","Close","CassettePicker","mixtapes","showModal","useModal","onClose","fullWidth","DialogTitle","Box","m","DialogContent","length","List","map","ListItem","button","ListItemIcon","PlayArrow","ListItemText","primary","Typography","RAM_CREATOR","process","isRAM","ModelViewer","height","QrCodeDialog","window","location","href","btoa","size","renderAs","NFT","openCassettePicker","Card","justifyContent","flexDirection","CardContent","CardMedia","component","image","Skeleton","description","attributes","attribute","Chip","label","trait_type","color","CardActions","Tooltip","MobileScreenShare","startsWith","Button","endIcon","getPotentialNFTs","connection","ownerAddress","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","parsedTokenAccounts","log","info","account","parsed","tokenAmount","uiAmount","decimals","filter","Boolean","getMetadatas","mints","Promise","all","metadataAddresses","getMultipleAccountsInfo","metadataAccountInfos","metadatas","metadataAccountInfo","push","sortAndSplitMetadatas","blockjams","otherRAM","other","sort","b","localeCompare","Home","useConnection","connected","publicKey","useWalletDialog","organizedMetadatas","setOrganizedMetadatas","undefined","then","potentialNFTs","NFTs","toLowerCase","includes","Grid","container","alignItems","direction","spacing","nft","item","xs","lg","xl","ARViewer","base64modelUri","useParams","modelViewerRef","useRef","setInterval","current","scale","updateFraming","atob","ref","ar","ar-modes","xr-environment","theme","createTheme","palette","main","deepPurple","background","default","grey","overrides","MuiButtonBase","root","MuiButton","textTransform","padding","marginRight","App","ThemeProvider","beta","CssBaseline","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQASKA,eAAaC,UAAkBC,WAAa,WAC3C,IACMC,EADSC,KACMC,eAAe,IACpC,OAAO,IAAIC,IAAUH,IAGtBI,eAAaN,UAAkBO,YAAc,SAAUC,GACvCL,KACRM,gBAAgBD,EAAME,aAG9BX,eAAaC,UAAkBW,mBAAqB,WACnD,IACMT,EADSC,KACMC,eAAe,IACpC,OAAOQ,IAAOC,OAAOX,IAGtBI,eAAaN,UAAkBc,oBAAsB,SACpDN,GAEeL,KACRM,gBAAgBG,IAAOG,OAAOP,KAKpC,IAgCKQ,EASAC,EAzCCC,EAAsB,IAAIb,IAAU,+CAEpCc,EAAkB,WAClBC,EAAU,W,SA6BXJ,O,iCAAAA,I,2BAAAA,I,yBAAAA,I,qCAAAA,I,qCAAAA,I,kCAAAA,M,cASAC,K,cAAAA,E,cAAAA,E,cAAAA,E,SAAAA,M,KAgDL,IA8CMI,EAAb,WAIE,WAAYC,GAA+C,yBAH3DC,SAG0D,OAF1DC,YAE0D,EACxDrB,KAAKoB,IAAMP,EAAYK,cACvBlB,KAAKqB,OAASF,EAAKE,OANvB,gDASE,SAAaC,GACX,IAAMC,EAAgBD,EAnHa,IAoH7BE,EAAcC,KAAKC,MAAMH,EAAgB,GAE/C,GAAIC,EAAc,GAChB,MAAMG,MAAM,yBAGd,IAAMC,EAA4B,EAAKL,EAAgB,EAEjDM,EAAOJ,KAAKK,IAAI,EAAGF,GAIzB,OAAuB,KAFH5B,KAAKqB,OAAOG,GAAeK,OArBnD,KA4CaE,EAKX,WAAYZ,GAIR,yBARJa,aAQG,OAPHC,cAOG,OANHC,WAMG,EACDlC,KAAKgC,QAAUb,EAAKa,QACpBhC,KAAKiC,SAAWd,EAAKc,SACrBjC,KAAKkC,MAAQf,EAAKe,OAITC,EAMX,WAAYhB,GAMR,yBAXJiB,UAWG,OAVHC,YAUG,OATHC,SASG,OARHC,0BAQG,OAPHC,cAOG,EACDxC,KAAKoC,KAAOjB,EAAKiB,KACjBpC,KAAKqC,OAASlB,EAAKkB,OACnBrC,KAAKsC,IAAMnB,EAAKmB,IAChBtC,KAAKuC,qBAAuBpB,EAAKoB,qBACjCvC,KAAKwC,SAAWrB,EAAKqB,UAIZC,EAAb,WAaE,WAAYtB,GAOR,yBAnBJC,SAmBG,OAlBHsB,qBAkBG,OAjBHC,UAiBG,OAhBHC,UAgBG,OAfHC,yBAeG,OAdHC,eAcG,OAbHC,kBAaG,OAVHC,mBAUG,OATH1B,aASG,EACDtB,KAAKoB,IAAMP,EAAYoC,WACvBjD,KAAK0C,gBAAkBvB,EAAKuB,gBAC5B1C,KAAK2C,KAAOxB,EAAKwB,KACjB3C,KAAK4C,KAAOzB,EAAKyB,KACjB5C,KAAK6C,oBAAsB1B,EAAK0B,oBAChC7C,KAAK8C,UAAY3B,EAAK2B,UACtB9C,KAAK+C,aAAe5B,EAAK4B,aA3B7B,+EA8BE,oGACwBG,EAAWlD,KAAK2C,MADxC,OACQrB,EADR,OAEEtB,KAAKsB,QAAUA,EACftB,KAAKgD,cAAgB1B,EAHvB,gDA9BF,6DAiFa6B,EAAkB,IAAIC,IAAc,CAC/C,CAxCA,WAAYjC,GAA2C,yBAJvDkC,YAAsB,EAIgC,KAHtDT,UAGsD,OAFtDE,eAEsD,EACpD9C,KAAK4C,KAAOzB,EAAKyB,KACjB5C,KAAK8C,UAAY3B,EAAK2B,WAwCtB,CACEQ,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,OAAQpB,GACT,CAAC,YAAa,SAIpB,CAxCA,WAAYhB,GAIR,yBATJkC,YAAsB,EASnB,KARHT,UAQG,OANHF,qBAMG,OALHG,yBAKG,EACD7C,KAAK4C,KAAOzB,EAAKyB,KAAOzB,EAAKyB,KAAO,KACpC5C,KAAK0C,gBAAkBvB,EAAKuB,gBAAkBvB,EAAKuB,gBAAkB,KACrE1C,KAAK6C,oBAAsB1B,EAAK0B,qBAmChC,CACES,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,OAAQ,CAAED,KAAM,SAAUE,KAAMrB,IACjC,CAAC,kBAAmB,CAAEmB,KAAM,SAAUE,KAAM,mBAC5C,CAAC,sBAAuB,CAAEF,KAAM,SAAUE,KAAM,UAKtD,CAvCA,WAAYrC,GAAiC,yBAF7CkC,YAAsB,GAEsB,KAD5CI,eAC4C,EAC1CzD,KAAKyD,UAAYtC,EAAKsC,WAwCtB,CACEH,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,YAAa,CAAED,KAAM,SAAUE,KAAM,WAI5C,CAxCA,WAAYrC,GAAuB,yBAHnCkC,YAAsB,EAGY,KAFlCK,YAEkC,EAChC1D,KAAK0D,OAASvC,EAAKuC,QAyCnB,CACEJ,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,SAAU,UAIjB,CA3OA,WAAYpC,GAMR,yBAvBJC,SAuBG,OAtBHsC,YAsBG,OArBHD,eAqBG,OAnBHE,kBAmBG,OARHC,sCAQG,EACD5D,KAAKoB,IAAMP,EAAYgD,gBACvB7D,KAAK0D,OAASvC,EAAKuC,OACnB1D,KAAKyD,UAAYtC,EAAKsC,UACtBzD,KAAK2D,aAAexC,EAAKwC,aACzB3D,KAAK4D,iCACHzC,EAAKyC,kCAiOP,CACEN,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,OACX,CAAC,YAAa,CAAED,KAAM,SAAUE,KAAM,QACtC,CAAC,eAAgB,kBACjB,CAAC,mCAAoC,qBAI3C,CAnOA,WAAYrC,GAAyD,yBAJrEC,SAIoE,OAHpEsC,YAGoE,OAFpED,eAEoE,EAClEzD,KAAKoB,IAAMP,EAAYiD,gBACvB9D,KAAK0D,OAASvC,EAAKuC,OACnB1D,KAAKyD,UAAYtC,EAAKsC,WAkOtB,CACEH,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,OACX,CAAC,YAAa,CAAED,KAAM,SAAUE,KAAM,WAI5C,CArMA,WAAYrC,GAIR,yBAVJC,SAUG,OARH2C,YAQG,OANHzC,aAMG,EACDtB,KAAKoB,IAAMP,EAAYmD,UACvBhE,KAAK+D,OAAS5C,EAAK4C,OACnB/D,KAAKsB,QAAUH,EAAKG,SAgMpB,CACEgC,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,kBACX,CAAC,UAAW,UAIlB,CACEpB,EACA,CACEmB,KAAM,SACNC,OAAQ,CACN,CAAC,OAAQ,UACT,CAAC,SAAU,UACX,CAAC,MAAO,UACR,CAAC,uBAAwB,OACzB,CAAC,WAAY,CAAED,KAAM,SAAUE,KAAM,CAACzB,QAI5C,CACEA,EACA,CACEuB,KAAM,SACNC,OAAQ,CACN,CAAC,UAAW,kBACZ,CAAC,WAAY,MACb,CAAC,QAAS,SAIhB,CACEd,EACA,CACEa,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,kBAAmB,kBACpB,CAAC,OAAQ,kBACT,CAAC,OAAQpB,GACT,CAAC,sBAAuB,MACxB,CAAC,YAAa,SAIpB,CACEjB,EACA,CACEoC,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,CAAC,UAOdU,EAAmB,IAAIC,OAAO,KAAU,KAEjCC,EAAiB,SAACC,GAC7B,IAAMC,EAAWC,+BACfnB,EACAV,EACA2B,GAKF,OAHAC,EAASzB,KAAKR,KAAOiC,EAASzB,KAAKR,KAAKmC,QAAQN,EAAkB,IAClEI,EAASzB,KAAKN,IAAM+B,EAASzB,KAAKN,IAAIiC,QAAQN,EAAkB,IAChEI,EAASzB,KAAKP,OAASgC,EAASzB,KAAKP,OAAOkC,QAAQN,EAAkB,IAC/DI,GAGF,SAAenB,EAAtB,kC,4CAAO,WACLsB,GADK,SAAAC,EAAA,sEAIGvE,IAAUwE,mBACd,CACEC,EAAOC,KAAK5D,GACZD,EAAoBR,WACpB,IAAIL,IAAUsE,GAAWjE,WACzBoE,EAAOC,KAAK3D,IAEdF,GAXC,uCAaH,GAAG8D,YAbA,4C,sBAgBA,SAAeC,EAAtB,kC,4CAAO,WAAkCnC,GAAlC,SAAA8B,EAAA,sEAEGvE,IAAUwE,mBACd,CACEC,EAAOC,KAAK5D,GACZD,EAAoBR,WACpBoC,EAAKpC,YAEPQ,GARC,uCAUH,IAVG,4C,yoBCzdQgE,EAdQ,WAAO,IAClBC,EAAWC,cAAXD,OAER,OACI,eAACE,EAAA,EAAD,CAASC,MAAO,CAAEC,QAAS,QAA3B,UACI,qBAAKD,MAAO,CAACE,SAAS,GAAtB,SACI,qBAAKC,IAAI,eAAeC,IAAI,WAAWJ,MAAO,CAACK,SAAU,SAE7D,cAAC,IAAD,IACCR,GAAU,cAAC,IAAD,CAAwBS,UAAW,cAACC,EAAA,EAAD,IAAaP,MAAO,CAAEQ,WAAY,SCsC7EC,EAtCI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACXC,EAAUC,IAAqBC,OAC/BC,EAAWC,mBAAQ,kBAAMC,YAAcL,KAAU,CAACA,IAIlDM,EAAUF,mBACZ,iBAAM,CACFG,cACAC,cACAC,YAAgB,CAAET,YAClBU,YAAyB,CAAEV,YAC3BW,iBAEJ,CAACX,IAGGY,EAAoBC,cAApBD,gBACFE,EAAUC,uBACZ,SAACC,GACGJ,EAAgBI,EAAMC,QAAN,UAAmBD,EAAM1E,KAAzB,aAAkC0E,EAAMC,SAAYD,EAAM1E,KAAM,CAAE4E,QAAS,UAC3FC,QAAQH,MAAMA,KAElB,CAACJ,IAGL,OACI,cAAC,IAAD,CAAoBT,SAAUA,EAA9B,SACI,cAAC,IAAD,CAAgBG,QAASA,EAASQ,QAASA,EAASM,aAAW,EAA/D,SACI,eAAC,IAAD,WACI,cAAC,EAAD,IACCrB,U,kPCCNsB,G,OAvCiC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAETC,qBAFS,mBAEpDC,EAFoD,KAEjCC,EAFiC,KAG3DC,qBAAU,WAAM,4CACZ,4BAAA/C,EAAA,sEAC8CgD,MAAML,EAAQxE,KAAKN,KADjE,8BAESoF,OAFT,OACUC,EADV,OAGIJ,EAAqBI,GAHzB,4CADY,uBAAC,WAAD,wBAMZC,KACD,CAACR,IAEJ,IAAMS,EAAW3B,mBAAQ,WAAO,IAAD,EACrB4B,EAAI,OAAGR,QAAH,IAAGA,GAAH,UAAGA,EAAmBS,WAAWC,aAAjC,aAAG,EAAqCC,MAAK,SAAAH,GAAI,MAAqB,kBAATA,GAAmC,QAAdA,EAAKtE,QACjG,MAAuB,kBAATsE,IAAP,OAA4BA,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMxF,OAC1C,CAACgF,IAEJ,OAAO,gCAEH,8BACIhC,IAAKuC,EACLK,eAAA,EACAC,mBAAA,EACAC,sBAAoB,QACpBjD,MAAO,CAACkD,UAAW,OAAQC,MAAO,OAAQC,OAAQ,UAElD,8BACI,qBAAKC,UAAU,gBAAf,SACI,wBACIC,MAAM,SACNnD,IAAI,qDACJoD,MAAM,kBACNvD,MAAO,CAACwD,OAAQ,mBC7BlCC,EAAsD,SAAC,GAAyB,IAAxBxB,EAAuB,EAAvBA,QAAYyB,EAAW,6BACzDxB,oBAAS,GADgD,mBAC1EyB,EAD0E,KACpEC,EADoE,KAGjF,OAAO,eAACC,EAAA,EAAD,yBAAQC,YAAY,GAAUJ,GAA9B,IAAqCC,KAAMA,EAA3C,UACH,cAACI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAS,kBAAML,GAAQ,IAAnC,SACI,cAACM,EAAA,EAAD,QAGR,cAAC,EAAD,CAAgBjC,QAASA,SAgDlBkC,EAxCiC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAaV,EAAW,8BAC9CxB,oBAAS,GADqC,mBAC/DyB,EAD+D,KACzDC,EADyD,KAE9DS,EAAcC,qBAAdD,UAER,OAAO,eAACR,EAAA,EAAD,2BAAYH,GAAZ,IAAmBC,KAAMA,EAAMY,QAAS,kBAAMX,GAAQ,IAAQY,WAAW,EAAzE,UACH,cAACT,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAS,kBAAML,GAAQ,IAAnC,SACI,cAACM,EAAA,EAAD,QAGR,cAACO,EAAA,EAAD,6BAGA,cAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,SACI,cAACC,EAAA,EAAD,UACKR,EAASS,OAAS,EACb,cAACC,EAAA,EAAD,UACGV,EAASW,KAAI,SAAC9C,GAAD,OACV,eAAC+C,EAAA,EAAD,CACIC,QAAM,EACNhB,QAAS,WACLI,EAAUZ,EAAsB,CAAExB,aAH1C,UAMI,cAACiD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAcC,QAASpD,EAAQxE,KAAKR,eAI9C,cAACqI,EAAA,EAAD,qD,mGCxDhBC,GAAc,IAAIxK,IAAUyK,gDAErBC,GAAQ,SAACvG,GAAiC,IAAD,EAClD,iBAAQA,EAASzB,KAAKJ,UACf6B,EAASzB,KAAKJ,SAASwH,OAAS,GAChC3F,EAASzB,KAAKJ,SAAS,GAAGR,UAAY0I,GAAY7F,kBAFzD,UCSEgG,GAAiC,SAAChC,GAEpC,OAAO,8BACHvD,IAAKuD,EAAMvD,IACX4C,eAAA,EACAE,sBAAoB,QACpBD,mBAAA,EACAhD,MAAO,CAAC2F,OAAQ,OAAQxC,MAAO,WAQjCyC,GAAsC,SAAC,GAA0B,IAAzBlD,EAAwB,EAAxBA,SAAwB,+BAC1CR,oBAAS,IADiC,mBAC3DyB,EAD2D,KACrDC,EADqD,KAGlE,OAAO,eAACC,EAAA,EAAD,CAAQF,KAAMA,EAAMY,QAAS,kBAAMX,GAAQ,IAA3C,UACH,cAACG,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAS,kBAAML,GAAQ,IAAnC,SACI,cAACM,EAAA,EAAD,QAGR,cAACQ,EAAA,EAAD,CAAKC,EAAG,EAAR,SACI,cAAC,KAAD,CACIzJ,MAAK,UAAK2K,OAAOC,SAASC,KAArB,cAA+BC,KAAKtD,IACzCuD,KAAM,IACNC,SAAS,aAGjB,cAACtB,EAAA,EAAD,UACI,cAACU,EAAA,EAAD,4DAsGGa,GA/FW,SAACzC,GAAqB,IAAD,EACnCxE,EAAiCwE,EAAjCxE,SAAUkH,EAAuB1C,EAAvB0C,mBADyB,EAEOlE,qBAFP,mBAEpCC,EAFoC,KAEjBC,EAFiB,KAGnCiC,EAAcC,qBAAdD,UAERhC,qBAAU,WAAM,4CACZ,4BAAA/C,EAAA,sEAC8CgD,MAAMpD,EAASzB,KAAKN,KADlE,8BAESoF,OAFT,OACUC,EADV,OAGIJ,EAAqBI,GAHzB,4CADY,uBAAC,WAAD,wBAMZC,KACD,CAACvD,IAEJ,IAAMwD,EAAW3B,mBAAQ,WAAO,IAAD,EACrB4B,EAAI,OAAGR,QAAH,IAAGA,GAAH,UAAGA,EAAmBS,WAAWC,aAAjC,aAAG,EAAqCC,MAAK,SAAAH,GAAI,MAAqB,kBAATA,GAAmC,QAAdA,EAAKtE,QACjG,MAAuB,kBAATsE,IAAP,OAA4BA,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMxF,OAC1C,CAACgF,IAEJ,OACI,eAACkE,EAAA,EAAD,CACIxE,QAAQ,WACR7B,MAAO,CAAC2F,OAAQ,OAAQ1F,QAAS,OAAQqG,eAAgB,eAAgBC,cAAe,UAF5F,UAII,eAACC,EAAA,EAAD,CAAaxG,MAAO,CAACE,SAAU,GAA/B,UACKwC,EACK,cAAC,GAAD,CAAavC,IAAKuC,IAClBP,EACA,cAACsE,GAAA,EAAD,CACEC,UAAU,MACV1G,MAAO,CAACmD,MAAO,OAAQwC,OAAQ,OAAQvC,OAAQ,QAC/CjD,IAAG,OAAEgC,QAAF,IAAEA,OAAF,EAAEA,EAAmBwE,QAE1B,cAACC,GAAA,EAAD,CAAU/E,QAAQ,OAAO7B,MAAO,CAAC2F,OAAQ,UAE/C,gCACI,cAACL,EAAA,EAAD,CAAYzD,QAAQ,KAApB,SACK3C,EAASzB,KAAKR,OAEnB,cAACqI,EAAA,EAAD,iBACKnD,QADL,IACKA,OADL,EACKA,EAAmB0E,cAExB,cAACnC,EAAA,EAAD,CAAKC,EAAG,EAAR,gBACKxC,QADL,IACKA,GADL,UACKA,EAAmB2E,kBADxB,aACK,EAA+B/B,KAAI,SAACgC,GAAD,OAChC,cAACrC,EAAA,EAAD,CAAKC,EAAG,EAAG1E,QAAQ,eAAnB,SACI,cAAC+G,GAAA,EAAD,CACIN,UAAU,MACV1G,MAAO,CAAC2F,OAAQ,QAChBsB,MACI,eAACvC,EAAA,EAAD,CAAKC,EAAG,EAAR,UACI,cAACW,EAAA,EAAD,UACKyB,EAAUG,aAEf,cAAC5B,EAAA,EAAD,CAAY6B,MAAM,gBAAlB,SACKJ,EAAU7L,0BAU/C,cAACkM,GAAA,EAAD,UACK1E,GACG,qCACI,cAAC2E,GAAA,EAAD,CAAS/D,MAAM,iBAAf,SACI,cAACU,EAAA,EAAD,CACIC,QAAS,kBAAMI,EAAUuB,GAAc,CAAClD,cAD5C,SAGI,cAAC4E,GAAA,EAAD,QAQN7B,GAAMvG,IAAaA,EAASzB,KAAKR,KAAKsK,WAAW,UAC5C,cAACC,EAAA,EAAD,CACC3F,QAAQ,WACR4F,QAAS,cAACtC,EAAA,EAAD,IACTlB,QAASmC,EAHV,mC,UCzHzBsB,GAAgB,uCAAG,WAAOC,EAAwBC,GAA/B,eAAAtI,EAAA,sEACcqI,EAAWE,8BAC1CD,EACA,CAACE,UAAWC,MAHK,cACfC,EADe,OAIlB9M,MACH4G,QAAQmG,IAAID,GALS,kBAOdA,EACFjD,KAAI,YAAgB,IACXmD,EADU,EAAbC,QACkB1K,KAAK2K,OAAOF,KACjC,GAAiC,IAA9BA,EAAKG,YAAYC,UAAgD,IAA9BJ,EAAKG,YAAYE,SACnD,OAAO,IAAIxN,IAAUmN,EAAK1K,SAIjCgL,OAAOC,UAfS,2CAAH,wDAkBhBC,GAAY,uCAAG,WAAOf,EAAwBgB,GAA/B,yBAAArJ,EAAA,sEACesJ,QAAQC,IACpCF,EAAM5D,KAAI,SAAAvH,GAAI,OAAImC,aAAmBnC,OAFxB,cACXsL,EADW,gBAIkBnB,EAAWoB,wBAAwBD,GAJrD,OAIXE,EAJW,OAKXC,EAAwB,GALb,cAMiBD,GANjB,IAMjB,4BAAWE,EAA6C,UAEhDD,EAAUE,KAAKnK,aAAekK,EAAoBzL,OARzC,uDAWVwL,GAXU,4CAAH,wDAqBZG,GAAwB,SAACH,GAC3B,IADyE,EACnEI,EAAwB,GACxBC,EAAuB,GACvBC,EAAoB,GAH+C,cAIlDN,GAJkD,IAIzE,2BAAkC,CAAC,IAAxB/J,EAAuB,QAC1BuG,GAAMvG,GACFA,EAASzB,KAAKR,KAAKsK,WAAW,SAC9B8B,EAAUF,KAAKjK,GAEfoK,EAASH,KAAKjK,GAGlBqK,EAAMJ,KAAKjK,IAZsD,8BAkBzE,OAFAmK,EAAUG,MAAK,SAAClK,EAAGmK,GAAJ,OAAUnK,EAAE7B,KAAKR,KAAKyM,cAAcD,EAAEhM,KAAKR,SAC1DqM,EAASE,MAAK,SAAClK,EAAGmK,GAAJ,OAAUnK,EAAE7B,KAAKR,KAAKyM,cAAcD,EAAEhM,KAAKR,SAClD,CACHoM,YACAC,WACAC,UA+EOI,GA3EE,WAAO,IACZhC,EAAeiC,cAAfjC,WADW,EAEc7H,cAAzB+J,EAFW,EAEXA,UAAWC,EAFA,EAEAA,UACXlG,EAAYmG,cAAZnG,QACAS,EAAcC,qBAAdD,UAJW,EAMiCnC,qBANjC,mBAMZ8H,EANY,KAMQC,EANR,KAQnB5H,qBAAU,WACN4H,OAAsBC,GACjBL,GAAcC,GACnBpC,GAAiBC,EAAYmC,GACxBK,MAAK,SAAAC,GAAa,OAAI1B,GAAaf,EAAYyC,MAC/CD,KAAKf,IACLe,KAAKF,KACX,CAACtC,EAAYkC,EAAWC,IAE3B,IAAMO,EAAOtJ,mBAAQ,WACjB,GAAKiJ,EACL,MAAM,GAAN,mBACOA,EAAmBX,WAD1B,YAEOW,EAAmBV,UAF1B,YAGOU,EAAmBT,UAE3B,CAACS,IAEE5F,EAAWrD,mBAAQ,WACrB,OAAKiJ,EACEA,EAAmBV,SACrBd,QAAO,SAACtJ,GAAD,OAAcA,EAASzB,KAAKR,KAAKqN,cAAcC,SAAS,cAFpC,KAGjC,CAACP,IAEJ,OACI,cAACtF,EAAA,EAAD,CAAKC,EAAG,EAAR,SACI,cAAC6F,EAAA,EAAD,CACIC,WAAS,EACTnE,eAAe,SACfoE,WAAW,UACXC,UAAU,MACVC,QAAS,EALb,SAOKf,EAAS,OACJQ,QADI,IACJA,OADI,EACJA,EAAMtF,KAAI,SAAA8F,GAAG,OACX,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACI,cAAC,GAAD,CACI/L,SAAU2L,EACVzE,mBAAoB,kBAChB/B,EAAUF,EAAgB,CAAEC,qBAMxC,cAACoG,EAAA,EAAD,CAAMM,MAAI,EAAC9K,MAAO,CAAC2F,OAAQ,QAA3B,SACI,cAACjB,EAAA,EAAD,CACIiB,OAAO,OACP1F,QAAQ,OACRqG,eAAe,SACfC,cAAc,SAJlB,SAMI,cAACiB,EAAA,EAAD,CACI3F,QAAQ,WACRoC,QAAS,kBAAML,GAAQ,IAF3B,6C,mBCzGjBsH,GA7BM,WAAO,IAChBC,EAAmBC,eAAnBD,eACFE,EAAiBC,iBAAO,MAE9BjJ,qBAAU,WAONkJ,aANA,WACIF,EAAeG,UACdH,EAAeG,QAAgBC,MAAQ,iBACvCJ,EAAeG,QAAgBE,mBAGhB,QAGxB,IAAMhJ,EAAW3B,mBAAQ,kBAAM4K,KAAKR,KAAiB,CAACA,IAGtD,OAAO,8BACHS,IAAKP,EACLlL,IAAKuC,EACLK,eAAA,EACAC,mBAAA,EACAC,sBAAoB,QACpB4I,IAAE,EAACC,WAAS,mBACZ9L,MAAO,CAACkD,UAAW,KACnB6I,kBAAA,KCdFC,GAAQC,YAAY,CACxBC,QAAS,CACL7N,KAAM,OACNgH,QAAS,CACL8G,KAAMC,IAAW,MAErBC,WAAY,CACRC,QAASC,IAAK,OAGtBC,UAAW,CACPC,cAAe,CACXC,KAAM,CACFpG,eAAgB,eAGxBqG,UAAW,CACPD,KAAM,CACFE,mBAAe1C,EACf2C,QAAS,aAEbvM,UAAW,CACPwM,YAAa,GAEjBrF,QAAS,CACLjH,WAAY,OA4BXuM,GAtBC,WACZ,OACI,cAACC,EAAA,EAAD,CAAehB,MAAOA,GAAtB,SACI,eAAC,IAAD,CAAeiB,MAAM,EAArB,UACI,cAACC,EAAA,EAAD,IACA,cAAC,IAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,KAAK,IAAZ,SACI,cAAC,EAAD,UACI,cAAC,GAAD,QAGR,cAAC,KAAD,CAAOA,KAAK,sBAAZ,SACI,cAAC,GAAD,iBC5CbC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.0fa2f356.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { BinaryReader, BinaryWriter, deserializeUnchecked } from 'borsh';\nimport base58 from 'bs58';\nimport BN from 'bn.js';\n\ntype StringPublicKey = string;\n\n// Extend Borsh\nexport const extendBorsh = () => {\n    (BinaryReader.prototype as any).readPubkey = function () {\n      const reader = this as unknown as BinaryReader;\n      const array = reader.readFixedArray(32);\n      return new PublicKey(array);\n    };\n  \n    (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n      const writer = this as unknown as BinaryWriter;\n      writer.writeFixedArray(value.toBuffer());\n    };\n  \n    (BinaryReader.prototype as any).readPubkeyAsString = function () {\n      const reader = this as unknown as BinaryReader;\n      const array = reader.readFixedArray(32);\n      return base58.encode(array) as StringPublicKey;\n    };\n  \n    (BinaryWriter.prototype as any).writePubkeyAsString = function (\n      value: StringPublicKey,\n    ) {\n      const writer = this as unknown as BinaryWriter;\n      writer.writeFixedArray(base58.decode(value));\n    };\n};\nextendBorsh();\n\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\n\nexport const METADATA_PREFIX = 'metadata';\nexport const EDITION = 'edition';\nexport const RESERVATION = 'reservation';\n\nexport const MAX_NAME_LENGTH = 32;\n\nexport const MAX_SYMBOL_LENGTH = 10;\n\nexport const MAX_URI_LENGTH = 200;\n\nexport const MAX_CREATOR_LIMIT = 5;\n\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\nexport const MAX_METADATA_LEN =\n  1 +\n  32 +\n  32 +\n  MAX_NAME_LENGTH +\n  MAX_SYMBOL_LENGTH +\n  MAX_URI_LENGTH +\n  MAX_CREATOR_LIMIT * MAX_CREATOR_LEN +\n  2 +\n  1 +\n  1 +\n  198;\n\nexport const MAX_EDITION_LEN = 1 + 32 + 8 + 200;\n\nexport const EDITION_MARKER_BIT_SIZE = 248;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport enum MetadataCategory {\n  Audio = 'audio',\n  Video = 'video',\n  Image = 'image',\n  VR = 'vr',\n}\n\nexport type MetadataFile = {\n  uri: string;\n  type: string;\n};\n\nexport type FileOrString = MetadataFile | string;\n\nexport type Attribute = {\n  trait_type?: string;\n  display_type?: string;\n  value: string | number;\n};\n\nexport interface IMetadataExtension {\n  name: string;\n  symbol: string;\n\n  creators: Creator[] | null;\n  description: string;\n  // preview image absolute URI\n  image: string;\n  animation_url?: string;\n\n  attributes?: Attribute[];\n\n  // stores link to item on meta\n  external_url: string;\n\n  seller_fee_basis_points: number;\n\n  properties: {\n    files?: FileOrString[];\n    category: MetadataCategory;\n    maxSupply?: number;\n    creators?: {\n      address: string;\n      shares: number;\n    }[];\n  };\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error('bad index for edition');\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    return appliedMask !== 0;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', Data],\n        ['isMutable', 'u8'], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['data', { kind: 'option', type: Data }],\n        ['updateAuthority', { kind: 'option', type: 'pubkeyAsString' }],\n        ['primarySaleHappened', { kind: 'option', type: 'u8' }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['supply', 'u64'],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n        ['printingMint', 'pubkeyAsString'],\n        ['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['parent', 'pubkeyAsString'],\n        ['edition', 'u64'],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', 'pubkeyAsString'],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', 'pubkeyAsString'],\n        ['mint', 'pubkeyAsString'],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'], // bool\n        ['isMutable', 'u8'], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['ledger', [31]],\n      ],\n    },\n  ],\n]);\n\n// eslint-disable-next-line no-control-regex\nconst METADATA_REPLACE = new RegExp('\\u0000', 'g');\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, '');\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, '');\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, '');\n  return metadata;\n};\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        METADATA_PROGRAM_ID.toBuffer(),\n        new PublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      METADATA_PROGRAM_ID\n    )\n  )[0].toBase58();\n}\n\nexport async function getMetadataAddress(mint: PublicKey): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      METADATA_PROGRAM_ID\n    )\n  )[0];\n}\n","import { Toolbar } from '@material-ui/core';\nimport { LinkOff } from '@material-ui/icons';\nimport { WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-material-ui';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport React, { FC } from 'react';\n\nconst Navigation: FC = () => {\n    const { wallet } = useWallet();\n\n    return (\n        <Toolbar style={{ display: 'flex' }}>\n            <div style={{flexGrow:1}}>\n                <img src=\"ram-logo.png\" alt=\"RAM logo\" style={{maxWidth: 150}} />\n            </div>\n            <WalletMultiButton />\n            {wallet && <WalletDisconnectButton startIcon={<LinkOff />} style={{ marginLeft: 8 }} />}\n        </Toolbar>\n    );\n};\n\nexport default Navigation;","import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport Navigation from './Navigation';\n\nconst Wallet: FC = ({children}) => {\n    const network = WalletAdapterNetwork.Devnet;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSolflareWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getLedgerWallet(),\n        ],\n        [network]\n    );\n\n    const { enqueueSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect>\n                <WalletDialogProvider>\n                    <Navigation />\n                    {children}\n                </WalletDialogProvider>\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default Wallet;","import { FC, useEffect, useMemo, useState } from \"react\";\nimport '@google/model-viewer/dist/model-viewer';\nimport { IMetadataExtension, Metadata } from \"../tools/metadata\";\n\ntype CassettePlayerProps = {\n    mixtape: Metadata\n};\n\nconst CassettePlayer: FC<CassettePlayerProps> = ({mixtape}) => {\n    // TODO: Abstract to share with NFT component\n    const [metadataExtension, setMetadataExtension] = useState<IMetadataExtension>()\n    useEffect(() => {\n        async function fetchMetadataExtension() {\n            const newMetadataExtension = await (await fetch(mixtape.data.uri))\n                .json() as IMetadataExtension;\n            setMetadataExtension(newMetadataExtension);\n        }\n        fetchMetadataExtension();\n    }, [mixtape]);\n\n    const modelUri = useMemo(() => {\n        const file = metadataExtension?.properties.files?.find(file => (typeof file !== 'string' && file.type === 'glb'));\n        return typeof file !== 'string' && file?.uri;\n    }, [metadataExtension]);\n    \n    return <div>\n        {/* @ts-ignore */}\n        <model-viewer\n            src={modelUri}\n            auto-rotate\n            camera-controls\n            rotation-per-second=\"30deg\"\n            style={{minHeight: \"40vh\", width: \"100%\", margin: \"auto\"}}\n        />\n            <div>\n                <div className=\"video-wrapper\">\n                    <iframe\n                        title=\"player\"\n                        src=\"https://audius.co/embed/playlist/DNKyZ?flavor=card\"\n                        allow=\"encrypted-media\"\n                        style={{border: \"none\"}}\n                    />\n                </div>\n            </div>\n    </div>;\n};\n\nexport default CassettePlayer;","import { Box, Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, List, ListItem, ListItemIcon, ListItemText, Typography } from \"@material-ui/core\";\nimport { Close, PlayArrow } from \"@material-ui/icons\";\nimport { useModal } from \"mui-modal-provider\";\nimport { FC, useState } from \"react\";\nimport { Metadata } from \"../tools/metadata\";\nimport CassettePlayer from \"./CassettePlayer\";\n\ntype CassettePlayerDialogProps = DialogProps & {\n    mixtape: Metadata\n};\n\nconst CassettePlayerDialog: FC<CassettePlayerDialogProps> = ({mixtape, ...props}) => {\n    const [open, setOpen] = useState(true);\n\n    return <Dialog fullScreen={true} {...props} open={open}>\n        <DialogActions>\n            <IconButton onClick={() => setOpen(false)}>\n                <Close />\n            </IconButton>\n        </DialogActions>\n        <CassettePlayer mixtape={mixtape} />\n    </Dialog>;\n};\n\ntype CassettePickerProps = DialogProps & {\n    mixtapes: Metadata[]\n};\n\nconst CassettePicker: FC<CassettePickerProps> = ({mixtapes, ...props}) => {\n    const [open, setOpen] = useState(true);\n    const { showModal } = useModal();\n    \n    return <Dialog {...props} open={open} onClose={() => setOpen(false)} fullWidth={true}>\n        <DialogActions>\n            <IconButton onClick={() => setOpen(false)}>\n                <Close />\n            </IconButton>\n        </DialogActions>\n        <DialogTitle>\n            Pick a mixtape\n        </DialogTitle>\n        <Box m={1}>\n            <DialogContent>\n                {mixtapes.length > 0\n                    ? <List>\n                        {mixtapes.map((mixtape) =>\n                            <ListItem\n                                button\n                                onClick={() => {\n                                    showModal(CassettePlayerDialog, { mixtape });\n                                }}\n                            >\n                                <ListItemIcon>\n                                    <PlayArrow />\n                                </ListItemIcon>\n                                <ListItemText primary={mixtape.data.name} />\n                            </ListItem>\n                        )}\n                    </List>\n                    : <Typography>\n                        You don't have any mixtape :(\n                    </Typography>\n                }\n            </DialogContent>\n        </Box>\n    </Dialog>\n};\n\nexport default CassettePicker;","import { PublicKey } from \"@solana/web3.js\";\nimport { Metadata } from \"./metadata\";\n\nconst RAM_CREATOR = new PublicKey(process.env.REACT_APP_RAM_CREATOR as string);\n\nexport const isRAM = (metadata: Metadata): boolean => {\n    return (metadata.data.creators\n        && metadata.data.creators.length > 0\n        && metadata.data.creators[0].address === RAM_CREATOR.toBase58())\n        ?? false;\n};\n\nconst MIXTAPES: string[] = [\n    'RAM Mixtape Volume 1'\n];","import { Box, Button, Card, CardActions, CardContent, CardMedia, Chip, Dialog, DialogActions, DialogContent, DialogProps, IconButton, Tooltip, Typography } from \"@material-ui/core\";\nimport { Skeleton } from '@material-ui/lab';\nimport { FC, useEffect, useMemo, useState } from \"react\";\nimport { IMetadataExtension, Metadata } from \"../tools/metadata\";\nimport '@google/model-viewer/dist/model-viewer';\nimport QRCode from \"qrcode.react\";\nimport { Close, PlayArrow, MobileScreenShare, Send } from \"@material-ui/icons\";\nimport { useModal } from \"mui-modal-provider\";\nimport { isRAM } from \"../tools/ram\";\n\nexport interface NFTProps {\n    metadata: Metadata;\n    openCassettePicker: () => void;\n};\n\nconst ModelViewer: FC<{src: string}> = (props: {src: string}) => {\n    //@ts-ignore\n    return <model-viewer\n        src={props.src}\n        auto-rotate\n        rotation-per-second=\"30deg\"\n        camera-controls\n        style={{height: \"25vh\", width: \"100%\"}}\n    />\n};\n\ntype QrCodeDaliogProps = DialogProps & {\n    modelUri: string\n};\n\nconst QrCodeDialog: FC<QrCodeDaliogProps> = ({modelUri, ...props}) => {\n    const [open, setOpen] = useState(true);\n\n    return <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogActions>\n            <IconButton onClick={() => setOpen(false)}>\n                <Close />\n            </IconButton>\n        </DialogActions>\n        <Box m={4}>\n            <QRCode\n                value={`${window.location.href}ar/${btoa(modelUri)}`}\n                size={512}\n                renderAs=\"canvas\"\n            />\n        </Box>\n        <DialogContent>\n            <Typography>\n                Scan with mobile to view your NFT in AR\n            </Typography>\n        </DialogContent>\n    </Dialog>;\n};\n\nconst NFT: FC<NFTProps> = (props: NFTProps) => {\n    const { metadata, openCassettePicker } = props;\n    const [metadataExtension, setMetadataExtension] = useState<IMetadataExtension>()\n    const { showModal } = useModal();\n\n    useEffect(() => {\n        async function fetchMetadataExtension() {\n            const newMetadataExtension = await (await fetch(metadata.data.uri))\n                .json() as IMetadataExtension;\n            setMetadataExtension(newMetadataExtension);\n        }\n        fetchMetadataExtension();\n    }, [metadata]);\n\n    const modelUri = useMemo(() => {\n        const file = metadataExtension?.properties.files?.find(file => (typeof file !== 'string' && file.type === 'glb'));\n        return typeof file !== 'string' && file?.uri;\n    }, [metadataExtension]);\n\n    return (\n        <Card\n            variant=\"outlined\"\n            style={{height: \"100%\", display: \"flex\", justifyContent: \"flex-between\", flexDirection: \"column\"}}\n        >\n            <CardContent style={{flexGrow: 1}}>\n                {modelUri\n                    ? <ModelViewer src={modelUri} />\n                    : metadataExtension\n                    ? <CardMedia\n                        component=\"img\"\n                        style={{width: \"auto\", height: \"25vh\", margin: \"auto\"}}\n                        src={metadataExtension?.image}\n                    />\n                    : <Skeleton variant=\"rect\" style={{height: \"30vh\"}} />\n                }\n                <div>\n                    <Typography variant=\"h5\">\n                        {metadata.data.name}\n                    </Typography>\n                    <Typography>\n                        {metadataExtension?.description}\n                    </Typography>\n                    <Box m={1}>\n                        {metadataExtension?.attributes?.map((attribute) =>\n                            <Box m={1} display=\"inline-block\">\n                                <Chip\n                                    component=\"div\"\n                                    style={{height: \"100%\"}}\n                                    label={(\n                                        <Box m={1}>\n                                            <Typography>\n                                                {attribute.trait_type}\n                                            </Typography>\n                                            <Typography color=\"textSecondary\">\n                                                {attribute.value}\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                />\n                            </Box>\n                        )}\n                    </Box>\n                </div>\n            </CardContent>\n            <CardActions>\n                {modelUri &&\n                    <>\n                        <Tooltip title=\"View on mobile\">\n                            <IconButton\n                                onClick={() => showModal(QrCodeDialog, {modelUri})}\n                            >\n                                <MobileScreenShare />\n                            </IconButton>\n                        </Tooltip>\n                        {/* <Tooltip title=\"Send NFT\">\n                            <IconButton>\n                                <Send />\n                            </IconButton>\n                        </Tooltip> */}\n                        {(isRAM(metadata) && metadata.data.name.startsWith(\"Model\"))\n                            && <Button\n                                variant=\"outlined\"\n                                endIcon={<PlayArrow />}\n                                onClick={openCassettePicker}\n                            >\n                                Play mixtape\n                            </Button>\n                        }\n                    </>\n                }\n            </CardActions>\n        </Card>\n    );\n};\n\nexport default NFT;","import { Box, Button, Grid, Typography } from \"@material-ui/core\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { useWalletDialog } from \"@solana/wallet-adapter-material-ui\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useModal } from \"mui-modal-provider\";\nimport { FC, useEffect, useMemo, useState } from \"react\";\nimport CassettePicker from \"../components/CassettePicker\";\nimport NFT from \"../components/NFT\";\nimport { decodeMetadata, getMetadataAddress, Metadata } from \"../tools/metadata\";\nimport { isRAM } from \"../tools/ram\";\n\n// An ui amount of exactly one and 0 decimal makes it a good candidate to be a NFT\nconst getPotentialNFTs = async (connection: Connection, ownerAddress: PublicKey): Promise<PublicKey[]> => {\n    const parsedTokenAccounts = (await connection.getParsedTokenAccountsByOwner(\n        ownerAddress,\n        {programId: TOKEN_PROGRAM_ID}\n    )).value;\n    console.log(parsedTokenAccounts);\n\n    return parsedTokenAccounts\n        .map(({account}) => {\n            const info = account.data.parsed.info;\n            if(info.tokenAmount.uiAmount === 1 && info.tokenAmount.decimals === 0) {\n                return new PublicKey(info.mint as string);\n            }\n            return;\n        })\n        .filter(Boolean) as PublicKey[];\n}\n\nconst getMetadatas = async (connection: Connection, mints: PublicKey[]): Promise<Metadata[]> => {\n    const metadataAddresses = await Promise.all(\n        mints.map(mint => getMetadataAddress(mint))\n    );\n    const metadataAccountInfos = await connection.getMultipleAccountsInfo(metadataAddresses);\n    const metadatas: Metadata[] = [];\n    for (const metadataAccountInfo of metadataAccountInfos) {\n        if(metadataAccountInfo) {\n            metadatas.push(decodeMetadata(metadataAccountInfo.data));\n        }\n    }\n    return metadatas;\n};\n\ntype OrganizedMetadatas = {\n    blockjams: Metadata[],\n    otherRAM: Metadata[],\n    other: Metadata[]\n};\n\n// RAM creator first, Model XY first in lexicographical order then whatever is left\nconst sortAndSplitMetadatas = (metadatas: Metadata[]): OrganizedMetadatas => {\n    const blockjams: Metadata[] = [];\n    const otherRAM: Metadata[] = [];\n    const other: Metadata[] = [];\n    for (const metadata of metadatas) {\n        if (isRAM(metadata)) {\n            if (metadata.data.name.startsWith('Model')) {\n                blockjams.push(metadata);\n            } else {\n                otherRAM.push(metadata);\n            }\n        } else {\n            other.push(metadata);\n        }\n    }\n\n    blockjams.sort((a, b) => a.data.name.localeCompare(b.data.name));\n    otherRAM.sort((a, b) => a.data.name.localeCompare(b.data.name));\n    return {\n        blockjams,\n        otherRAM,\n        other\n    };\n};\n\nconst Home: FC = () => {\n    const { connection } = useConnection();\n    const { connected, publicKey } = useWallet();\n    const { setOpen } = useWalletDialog();\n    const { showModal } = useModal();\n\n    const [organizedMetadatas, setOrganizedMetadatas] = useState<OrganizedMetadatas>();\n\n    useEffect(() => {\n        setOrganizedMetadatas(undefined);\n        if (!connected || !publicKey) return;\n        getPotentialNFTs(connection, publicKey)\n            .then(potentialNFTs => getMetadatas(connection, potentialNFTs))\n            .then(sortAndSplitMetadatas)\n            .then(setOrganizedMetadatas);\n    }, [connection, connected, publicKey])\n\n    const NFTs = useMemo(() => {\n        if (!organizedMetadatas) return;\n        return [\n            ...organizedMetadatas.blockjams,\n            ...organizedMetadatas.otherRAM,\n            ...organizedMetadatas.other\n        ];\n    }, [organizedMetadatas]);\n\n    const mixtapes = useMemo(() => {\n        if (!organizedMetadatas) return [];\n        return organizedMetadatas.otherRAM\n            .filter((metadata) => metadata.data.name.toLowerCase().includes('mixtape'));\n    }, [organizedMetadatas]);\n\n    return (\n        <Box m={2}>\n            <Grid\n                container\n                justifyContent=\"center\"\n                alignItems=\"stretch\"\n                direction=\"row\"\n                spacing={3}\n            >\n                {connected\n                    ? NFTs?.map(nft => \n                        <Grid item xs={6} lg={4} xl={3}>\n                            <NFT\n                                metadata={nft}\n                                openCassettePicker={() =>\n                                    showModal(CassettePicker, { mixtapes })\n                                }\n                            />\n                        </Grid>\n                    )\n                    : (\n                        <Grid item style={{height: \"80vh\"}}>\n                            <Box\n                                height=\"100%\"\n                                display=\"flex\"\n                                justifyContent=\"center\"\n                                flexDirection=\"column\"\n                            >\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={() => setOpen(true)}\n                                >\n                                    Connect wallet to play\n                                </Button>\n                            </Box>\n                        </Grid>\n                    )\n                }\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Home;\n","import { FC, useEffect, useMemo, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst ARViewer: FC = () => {\n    const { base64modelUri } = useParams<{base64modelUri: string}>();\n    const modelViewerRef = useRef(null);\n\n    useEffect(() => {\n        function update() {\n        if (modelViewerRef.current) {\n            (modelViewerRef.current as any).scale = '0.01 0.01 0.01';\n            (modelViewerRef.current as any).updateFraming();\n        }\n        }\n        setInterval(update, 5000);\n    });\n\n    const modelUri = useMemo(() => atob(base64modelUri), [base64modelUri]);\n\n    //@ts-ignore\n    return <model-viewer\n        ref={modelViewerRef}\n        src={modelUri}\n        auto-rotate\n        camera-controls\n        rotation-per-second=\"30deg\"\n        ar ar-modes=\"webxr quick-look\"\n        style={{minHeight: 400}}\n        xr-environment\n    />\n}\n\nexport default ARViewer;","import React, { FC } from 'react';\nimport './App.css';\nimport { createTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport Wallet from './components/Wallet';\nimport { deepPurple, grey } from '@material-ui/core/colors';\nimport { SnackbarProvider } from 'notistack';\nimport Home from './pages/Home';\nimport {\n    HashRouter as Router,\n    Route,\n} from \"react-router-dom\";\nimport ARViewer from './components/ARViewer';\nimport ModalProvider from \"mui-modal-provider\";\n\nconst theme = createTheme({\n  palette: {\n      type: 'dark',\n      primary: {\n          main: deepPurple[700],\n      },\n      background: {\n          default: grey[900]\n      }\n  },\n  overrides: {\n      MuiButtonBase: {\n          root: {\n              justifyContent: 'flex-start',\n          },\n      },\n      MuiButton: {\n          root: {\n              textTransform: undefined,\n              padding: '12px 16px',\n          },\n          startIcon: {\n              marginRight: 8,\n          },\n          endIcon: {\n              marginLeft: 8,\n          },\n      },\n  },\n});\n\nconst App: FC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <ModalProvider beta={true}>\n                <CssBaseline />\n                <SnackbarProvider>\n                    <Router>\n                        <Route path=\"/\">\n                            <Wallet>\n                                <Home />\n                            </Wallet>\n                        </Route>\n                        <Route path=\"/ar/:base64modelUri\">\n                            <ARViewer />\n                        </Route>\n                    </Router>\n                </SnackbarProvider>\n            </ModalProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}